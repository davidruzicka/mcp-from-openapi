// Generated by ts-to-zod
import { z } from "zod";

export const compositeStepSchema = z.object({
    call: z.string(),
    store_as: z.string(),
    depends_on: z.array(z.string()).optional()
});

export const parameterDefinitionSchema = z.object({
    type: z.union([z.literal("string"), z.literal("integer"), z.literal("number"), z.literal("boolean"), z.literal("array"), z.literal("object")]),
    description: z.string(),
    required: z.boolean().optional(),
    required_for: z.array(z.string()).optional(),
    enum: z.array(z.string()).optional(),
    items: z.object({
        type: z.string()
    }).optional(),
    default: z.unknown().optional(),
    example: z.unknown().optional()
});

export const authInterceptorSchema = z.object({
    type: z.union([z.literal("bearer"), z.literal("query"), z.literal("custom-header")]),
    header_name: z.string().optional(),
    query_param: z.string().optional(),
    value_from_env: z.string()
});

export const baseUrlConfigSchema = z.object({
    value_from_env: z.string(),
    default: z.string().optional()
});

export const rateLimitConfigSchema = z.object({
    max_requests_per_minute: z.number(),
    overrides: z.record(z.string(), z.object({
        max_requests_per_minute: z.number()
    })).optional()
});

export const retryConfigSchema = z.object({
    max_attempts: z.number(),
    backoff_ms: z.array(z.number()),
    retry_on_status: z.array(z.number())
});

export const toolDefinitionSchema = z.object({
    name: z.string(),
    description: z.string(),
    operations: z.union([z.record(z.string(), z.string()), z.record(z.string(), z.string())]).optional(),
    composite: z.boolean().optional(),
    steps: z.array(compositeStepSchema).optional(),
    partial_results: z.boolean().optional(),
    parameters: z.record(z.string(), parameterDefinitionSchema),
    metadata_params: z.array(z.string()).optional(),
    response_fields: z.record(z.string(), z.array(z.string())).optional()
});

export const interceptorConfigSchema = z.object({
    auth: authInterceptorSchema.optional(),
    base_url: baseUrlConfigSchema.optional(),
    rate_limit: rateLimitConfigSchema.optional(),
    retry: retryConfigSchema.optional(),
    array_format: z.union([z.literal("brackets"), z.literal("indices"), z.literal("repeat"), z.literal("comma")]).optional()
});

export const profileSchema = z.object({
    profile_name: z.string(),
    description: z.string().optional(),
    tools: z.array(toolDefinitionSchema),
    interceptors: interceptorConfigSchema.optional(),
    parameter_aliases: z.record(z.string(), z.array(z.string())).optional()
});
