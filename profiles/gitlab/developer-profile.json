{
  "$schema": "../../../profile-schema.json",
  "profile_name": "gitlab-developer",
  "description": "Developer-focused tools for common GitLab workflows",
  
  "parameter_aliases": {
    "id": ["project_id", "group_id", "resource_id"],
    "badge_id": ["badge_id"],
    "branch": ["branch"],
    "user_id": ["user_id"],
    "job_id": ["job_id"],
    "merge_request_iid": ["iid", "mr_iid"],
    "issue_iid": ["iid"]
  },
  
  "tools": [
    {
      "name": "manage_groups",
      "description": "Work with GitLab groups. Actions: 'list' (all groups), 'get' (group details), 'list_projects' (projects in group), 'list_subgroups' (subgroups of group). Use 'list' to discover groups, 'list_projects' to see projects in a specific group.",
      "metadata_params": ["action", "group_id"],
      "operations": {
        "list": "getApiV4Groups",
        "get": "getApiV4GroupsId",
        "list_projects": "getApiV4GroupsIdProjects",
        "list_subgroups": "getApiV4GroupsIdSubgroups"
      },
      "response_fields": {
        "list": ["id", "name", "path", "full_path", "description", "visibility", "web_url"],
        "list_projects": ["id", "name", "path", "path_with_namespace", "description", "visibility", "web_url", "last_activity_at", "star_count", "forks_count", "avatar_url"],
        "list_subgroups": ["id", "name", "path", "full_path", "description", "visibility", "web_url"]
      },
      "parameters": {
        "action": {
          "type": "string",
          "enum": ["list", "get", "list_projects", "list_subgroups"],
          "description": "Action to perform",
          "required": true
        },
        "group_id": {
          "type": "string",
          "description": "Group ID (numeric like '36173' or short name like 'ai-adoption')",
          "required_for": ["get", "list_projects", "list_subgroups"],
          "example": "ai-adoption"
        },
        "page": {
          "type": "integer",
          "description": "Page number for pagination",
          "default": 1
        },
        "per_page": {
          "type": "integer",
          "description": "Items per page (recommended max 100)",
          "default": 20
        },
        "search": {
          "type": "string",
          "description": "Search for groups/projects by name"
        },
        "owned": {
          "type": "boolean",
          "description": "Limit to groups owned by current user (for list action)"
        },
        "archived": {
          "type": "boolean",
          "description": "Limit by archived status (for list_projects action)"
        }
      }
    },

    {
      "name": "manage_projects",
      "description": "Work with GitLab projects. Actions: 'list' (all projects), 'get' (project details), 'search' (search projects). Use 'list' to discover projects, 'search' to find specific ones.",
      "metadata_params": ["action", "project_id"],
      "operations": {
        "list": "getApiV4Projects",
        "get": "getApiV4ProjectsId"
      },
      "response_fields": {
        "list": ["id", "name", "path", "path_with_namespace", "description", "visibility", "web_url", "last_activity_at", "star_count", "forks_count", "avatar_url", "namespace"]
      },
      "parameters": {
        "action": {
          "type": "string",
          "enum": ["list", "get"],
          "description": "Action to perform",
          "required": true
        },
        "project_id": {
          "type": "string",
          "description": "Project ID (numeric like '123' or URL-encoded path like 'group%2Fproject')",
          "required_for": ["get"],
          "example": "123"
        },
        "page": {
          "type": "integer",
          "description": "Page number for pagination",
          "default": 1
        },
        "per_page": {
          "type": "integer",
          "description": "Items per page (recommended max 100)",
          "default": 20
        },
        "search": {
          "type": "string",
          "description": "Search for projects by name or description"
        },
        "owned": {
          "type": "boolean",
          "description": "Limit to projects owned by current user"
        },
        "membership": {
          "type": "boolean",
          "description": "Limit to projects current user is a member of"
        }
      }
    },

    {
      "name": "manage_merge_requests",
      "description": "Work with merge requests. Actions: 'list' (all MRs in project), 'get' (single MR details), 'create' (create new MR), 'delete' (delete MR - admins only). Use 'list' to see all merge requests, filter by state (opened, closed, merged, all).",
      "metadata_params": ["action", "project_id", "merge_request_iid"],
      "operations": {
        "list": "getApiV4ProjectsIdMergeRequests",
        "get": "getApiV4ProjectsIdMergeRequestsMergeRequestIid",
        "create": "postApiV4ProjectsIdMergeRequests",
        "delete": "deleteApiV4ProjectsIdMergeRequestsMergeRequestIid"
      },
      "response_fields": {
        "list": ["id", "iid", "title", "description", "state", "web_url", "author", "created_at", "updated_at"],
        "create": ["id", "iid", "title", "description", "state", "web_url", "author", "created_at"]
      },
      "parameters": {
        "action": {
          "type": "string",
          "enum": ["list", "get", "create", "delete"],
          "description": "Action to perform",
          "required": true
        },
        "project_id": {
          "type": "string",
          "description": "Project ID (numeric like '123' or URL-encoded path like 'group%2Fproject')",
          "required": true,
          "example": "123"
        },
        "merge_request_iid": {
          "type": "integer",
          "description": "The internal ID of the merge request",
          "required_for": ["get"]
        },
        "source_branch": {
          "type": "string",
          "description": "The source branch name (required for create)",
          "required_for": ["create"],
          "example": "feature/new-feature"
        },
        "target_branch": {
          "type": "string",
          "description": "The target branch name (required for create)",
          "required_for": ["create"],
          "example": "main"
        },
        "title": {
          "type": "string",
          "description": "The title of the merge request (required for create)",
          "required_for": ["create"],
          "example": "Implement new feature"
        },
        "description": {
          "type": "string",
          "description": "The description of the merge request (optional for create)",
          "example": "This implements the new feature requested by the team."
        },
        "assignee_id": {
          "type": "integer",
          "description": "The ID of the user to assign the merge request to (optional for create)",
          "example": 123
        },
        "assignee_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The IDs of the users to assign the merge request to (optional for create)",
          "example": [123, 456]
        },
        "reviewer_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The IDs of the users to review the merge request (optional for create)",
          "example": [789, 101]
        },
        "labels": {
          "type": "string",
          "description": "Labels to be added to the merge request (comma-separated, optional for create)",
          "example": "bug,feature,frontend"
        },
        "milestone_id": {
          "type": "integer",
          "description": "The ID of the milestone to assign the merge request to (optional for create)",
          "example": 42
        },
        "allow_collaboration": {
          "type": "boolean",
          "description": "Allow commits from the target branch to be pushed to the source branch (optional for create)",
          "default": false,
          "example": true
        },
        "allow_maintainer_to_push": {
          "type": "boolean",
          "description": "Allow maintainers to push to the source branch (optional for create)",
          "default": false,
          "example": true
        },
        "squash": {
          "type": "boolean",
          "description": "Squash commits when merge request is accepted (optional for create)",
          "default": false,
          "example": true
        },
        "target_project_id": {
          "type": "integer",
          "description": "The target project ID (when creating merge request across projects, optional for create)",
          "example": 789
        },
        "remove_source_branch": {
          "type": "boolean",
          "description": "Remove the source branch when the merge request is accepted (optional for create)",
          "default": false,
          "example": true
        },
        "draft": {
          "type": "boolean",
          "description": "Mark the merge request as a draft (optional for create)",
          "default": false,
          "example": false
        },
        "state": {
          "type": "string",
          "enum": ["opened", "closed", "merged", "all"],
          "description": "Filter by merge request state",
          "default": "opened"
        },
        "page": {
          "type": "integer",
          "description": "Page number for pagination",
          "default": 1
        },
        "per_page": {
          "type": "integer",
          "description": "Items per page (recommended max 100)",
          "default": 20
        }
      }
    },

    {
      "name": "manage_issues",
      "description": "Work with issues. Actions: 'list' (all issues in project), 'get' (single issue details), 'create' (create new issue), 'delete' (delete issue - admins only). Use 'list' to see all issues, filter by state (opened, closed, all).",
      "metadata_params": ["action", "project_id", "issue_iid"],
      "operations": {
        "list": "getApiV4ProjectsIdIssues",
        "get": "getApiV4ProjectsIdIssuesIssueIid",
        "create": "postApiV4ProjectsIdIssues",
        "delete": "deleteApiV4ProjectsIdIssuesIssueIid"
      },
      "response_fields": {
        "list": ["id", "iid", "title", "description", "state", "web_url", "author", "created_at", "updated_at"],
        "create": ["id", "iid", "title", "description", "state", "web_url", "author", "created_at"]
      },
      "parameters": {
        "action": {
          "type": "string",
          "enum": ["list", "get", "create", "delete"],
          "description": "Action to perform",
          "required": true
        },
        "project_id": {
          "type": "string",
          "description": "Project ID (numeric like '123' or URL-encoded path like 'group%2Fproject')",
          "required": true,
          "example": "123"
        },
        "issue_iid": {
          "type": "integer",
          "description": "The internal ID of the issue",
          "required_for": ["get", "delete"]
        },
        "state": {
          "type": "string",
          "enum": ["opened", "closed", "all"],
          "description": "Filter by issue state",
          "default": "opened"
        },
        "page": {
          "type": "integer",
          "description": "Page number for pagination",
          "default": 1
        },
        "title": {
          "type": "string",
          "description": "The title of the issue (required for create)",
          "required_for": ["create"],
          "example": "Implement new feature"
        },
        "description": {
          "type": "string",
          "description": "The description of the issue (optional for create)",
          "example": "This implements the new feature requested by the team."
        },
        "assignee_id": {
          "type": "integer",
          "description": "The ID of the user to assign the issue to (optional for create)",
          "example": 123
        },
        "assignee_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The IDs of the users to assign the issue to (optional for create)",
          "example": [123, 456]
        },
        "labels": {
          "type": "string",
          "description": "Labels to be added to the issue (comma-separated, optional for create)",
          "example": "bug,feature,frontend"
        },
        "milestone_id": {
          "type": "integer",
          "description": "The ID of the milestone to assign the issue to (optional for create)",
          "example": 42
        },
        "due_date": {
          "type": "string",
          "format": "date",
          "description": "The due date of the issue (optional for create)",
          "example": "2024-12-31"
        },
        "confidential": {
          "type": "boolean",
          "description": "Whether the issue should be confidential (optional for create)",
          "default": false,
          "example": false
        },
        "weight": {
          "type": "integer",
          "description": "The weight of the issue (optional for create)",
          "minimum": 0,
          "example": 5
        },
        "per_page": {
          "type": "integer",
          "description": "Items per page (recommended max 100)",
          "default": 20
        }
      }
    },

    {
      "name": "manage_project_badges",
      "description": "Manage badges for a project. Actions: 'list' (get all badges), 'get' (single badge by ID), 'create' (new badge with link_url and image_url), 'update' (modify existing badge), 'delete' (remove badge). Use 'list' when you want to see what badges exist, 'create' to add new ones.",
      "metadata_params": ["action", "project_id", "badge_id"],
      "operations": {
        "list": "getApiV4ProjectsIdBadges",
        "get": "getApiV4ProjectsIdBadgesBadgeId",
        "create": "postApiV4ProjectsIdBadges",
        "update": "putApiV4ProjectsIdBadgesBadgeId",
        "delete": "deleteApiV4ProjectsIdBadgesBadgeId"
      },
      "parameters": {
        "project_id": {
          "type": "string",
          "description": "Project ID (numeric like '123' or URL-encoded path like 'group%2Fproject')",
          "required": true,
          "example": "123"
        },
        "action": {
          "type": "string",
          "enum": ["list", "get", "create", "update", "delete"],
          "description": "Action to perform",
          "required": true
        },
        "badge_id": {
          "type": "integer",
          "description": "Badge ID",
          "required_for": ["get", "update", "delete"]
        },
        "link_url": {
          "type": "string",
          "description": "URL the badge links to",
          "required_for": ["create"]
        },
        "image_url": {
          "type": "string",
          "description": "URL of the badge image",
          "required_for": ["create"]
        },
        "name": {
          "type": "string",
          "description": "Human-readable badge name"
        },
        "page": {
          "type": "integer",
          "description": "Page number for pagination",
          "default": 1
        },
        "per_page": {
          "type": "integer",
          "description": "Items per page (recommended max 100)",
          "default": 20
        }
      }
    },

    {
      "name": "manage_branches",
      "description": "Manage repository branches. Actions: 'list' (all branches, supports search/sort), 'get' (single branch details), 'create' (new branch from ref), 'delete' (remove branch), 'protect' (make protected), 'unprotect' (remove protection), 'exists' (check if branch exists). Use 'list' to see all branches, 'create' to make a new feature branch from main.",
      "operations": {
        "list": "getApiV4ProjectsIdRepositoryBranches",
        "get": "getApiV4ProjectsIdRepositoryBranchesBranch",
        "create": "postApiV4ProjectsIdRepositoryBranches",
        "delete": "deleteApiV4ProjectsIdRepositoryBranchesBranch",
        "protect": "putApiV4ProjectsIdRepositoryBranchesBranchProtect",
        "unprotect": "putApiV4ProjectsIdRepositoryBranchesBranchUnprotect",
        "exists": "headApiV4ProjectsIdRepositoryBranchesBranch"
      },
      "parameters": {
        "project_id": {
          "type": "string",
          "description": "Project ID (numeric like '123' or URL-encoded path like 'group%2Fproject')",
          "required": true,
          "example": "123"
        },
        "action": {
          "type": "string",
          "enum": ["list", "get", "create", "delete", "protect", "unprotect", "exists"],
          "description": "Operation to perform on branches",
          "required": true
        },
        "branch": {
          "type": "string",
          "description": "Branch name",
          "required_for": ["get", "delete", "protect", "unprotect", "exists"]
        },
        "ref": {
          "type": "string",
          "description": "Source branch or commit SHA for new branch",
          "required_for": ["create"]
        },
        "search": {
          "type": "string",
          "description": "Search branches by name (for list action)"
        },
        "sort": {
          "type": "string",
          "enum": ["name_asc", "updated_asc", "updated_desc"],
          "description": "Sort order (for list action)"
        },
        "developers_can_push": {
          "type": "boolean",
          "description": "Allow developers to push (for protect action)"
        },
        "developers_can_merge": {
          "type": "boolean",
          "description": "Allow developers to merge (for protect action)"
        }
      }
    },

    {
      "name": "manage_access_requests",
      "description": "Manage access requests for projects or groups. Actions: 'list' (pending requests), 'approve' (grant access with access_level), 'deny' (reject request), 'request' (request access as current user). Use 'list' to see who requested access, 'approve' to grant it with specified access level (10=Guest, 20=Reporter, 30=Developer, 40=Maintainer, 50=Owner).",
      "operations": {
        "list_project": "getApiV4ProjectsIdAccessRequests",
        "list_group": "getApiV4GroupsIdAccessRequests",
        "approve_project": "putApiV4ProjectsIdAccessRequestsUserIdApprove",
        "approve_group": "putApiV4GroupsIdAccessRequestsUserIdApprove",
        "deny_project": "deleteApiV4ProjectsIdAccessRequestsUserId",
        "deny_group": "deleteApiV4GroupsIdAccessRequestsUserId",
        "request_project": "postApiV4ProjectsIdAccessRequests",
        "request_group": "postApiV4GroupsIdAccessRequests"
      },
      "parameters": {
        "resource_type": {
          "type": "string",
          "enum": ["project", "group"],
          "description": "Whether to operate on project or group",
          "required": true
        },
        "resource_id": {
          "type": "string",
          "description": "Project ID (numeric or URL-encoded path) or Group ID (numeric or short name)",
          "required": true,
          "example": "ai-adoption"
        },
        "action": {
          "type": "string",
          "enum": ["list", "approve", "deny", "request"],
          "description": "Access request operation to perform",
          "required": true
        },
        "user_id": {
          "type": "integer",
          "description": "User ID of requester",
          "required_for": ["approve", "deny"]
        },
        "access_level": {
          "type": "integer",
          "description": "Access level to grant: 10=Guest, 20=Reporter, 30=Developer, 40=Maintainer, 50=Owner",
          "default": 30
        }
      }
    },

    {
      "name": "list_project_jobs",
      "description": "List all CI/CD jobs for a project with optional status filtering. Use 'scope' parameter to filter by job status like ['failed', 'canceled', 'success', 'running', 'pending']. Useful for finding failed jobs or monitoring pipeline progress.",
      "operations": {
        "list": "listProjectJobs"
      },
      "parameters": {
        "project_id": {
          "type": "string",
          "description": "Project ID (numeric like '123' or URL-encoded path like 'group%2Fproject')",
          "required": true,
          "example": "123"
        },
        "scope": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Filter by job status (can specify multiple)"
        }
      }
    },

    {
      "name": "manage_job",
      "description": "Manage a specific CI/CD job. Actions: 'get' (fetch job details, logs, and timing), 'play' (trigger a manual/delayed job to run immediately). Use 'get' to see job status and output, 'play' to run jobs in 'manual' state.",
      "operations": {
        "get": "getSingleJob",
        "play": "triggerManualJob"
      },
      "parameters": {
        "project_id": {
          "type": "string",
          "description": "Project ID (numeric like '123' or URL-encoded path like 'group%2Fproject')",
          "required": true,
          "example": "123"
        },
        "action": {
          "type": "string",
          "enum": ["get", "play"],
          "description": "Job operation to perform",
          "required": true
        },
        "job_id": {
          "type": "integer",
          "description": "The numeric job ID (not job name)",
          "required": true
        }
      }
    }
  ],

  "interceptors": {
    "array_format": "brackets",
    "auth": {
      "type": "bearer",
      "value_from_env": "API_TOKEN"
    },
    "base_url": {
      "value_from_env": "API_BASE_URL",
      "default": "https://gitlab.com/api/v4"
    },
    "rate_limit": {
      "max_requests_per_minute": 600,
      "overrides": {
        "postApiV4ProjectsIdIssues": {
          "max_requests_per_minute": 10
        },
        "deleteApiV4ProjectsIdIssuesIssueIid": {
          "max_requests_per_minute": 5
        },
        "postApiV4ProjectsIdMergeRequests": {
          "max_requests_per_minute": 10
        },
        "deleteApiV4ProjectsIdMergeRequestsMergeRequestIid": {
          "max_requests_per_minute": 5
        }
      }
    },
    "retry": {
      "max_attempts": 3,
      "backoff_ms": [1000, 2000, 4000],
      "retry_on_status": [429, 502, 503, 504]
    }
  }
}

